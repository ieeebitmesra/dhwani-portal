<% include partials/header-dashboard.ejs %>

<h1>Slot Timings</h1>
<div id="chart"></div>

</div>
<script type="text/javascript">
  var margin = { top: 50, right: 30, bottom: 10, left: 41 },
      width =  2000- margin.left - margin.right,
      height = 380 - margin.top - margin.bottom,
      gridSize = Math.floor(width /50),
      legendElementWidth = gridSize*2,
      buckets = 9,
      colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
      days = ["Mon", "Tues", "Wed", "Thurs", "Fri", "Sat", "Sun"],
      times = ["06:00","","07:00","","8:00","","09:00","","10:00","","11:00","","12:00","","13:00","","14:00","","15:00","","16:00","","17:00", "", "18:00", "", "19:00", "", "20:00", "", "21:00", "", "22:00", "", "23:00", "", "00:00", "", "01:00", "", "02:00", "", "03:00", "", "04:00", "","5:00"];
      datasets = ["/public/data1.tsv"];

  var svg = d3.select("#chart").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
      .style("overflow", "scroll");;

  var dayLabels = svg.selectAll(".dayLabel")
      .data(days)
      .enter().append("text")
        .text(function (d) { return d; })
        .attr("x", 0)
        .attr("y", function (d, i) { return i * gridSize; })
        .style("text-anchor", "end")
        .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
        .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "dayLabel mono axis" : "dayLabel mono axis"); });

  var timeLabels = svg.selectAll(".timeLabel")
      .data(times)
      .enter().append("text")
        .text(function(d) { return d; })
        .attr("x", function(d, i) { return i * gridSize*1.045; })
        .attr("y", 0)
        .style("text-anchor", "middle")
        .attr("transform", "translate(" + gridSize / 2 + ", -6)")
        .attr("class", function(d, i) { return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis"); });

  var heatmapChart = function(tsvFile) {
    d3.tsv(tsvFile,
    function(d) {
      return {
        day: +d.day,
        hour: +d.hour,
        value: +d.value
      };
    },
    function(error, data) {
      var colorScale = d3.scale.quantile()
          .domain([0, buckets - 1, d3.max(data, function (d) { return d.value; })])
          .range(colors);

      var cards = svg.selectAll(".hour")
          .data(data, function(d) {return d.day+':'+d.hour;})
          .style("overflow", "scroll");

      cards.append("title");
      
      cards.enter().append("g")
          .attr("class", "legend");

      cards.enter().append("rect")
          .attr("x", function(d) { return (d.hour - 1) * gridSize*1.045; })
          .attr("y", function(d) { return (d.day - 1) * gridSize; })
          .attr("class", "hour")
          .attr("width", gridSize+1.045)
          .attr("height", gridSize)
          .style("fill", colors[0]);

      cards.transition().duration(1000)
          .style("fill", function(d) { return colorScale(d.value); });

      cards.select("title").text(function(d) { return d.value; });
      
      cards.exit().remove();

      var legend = svg.selectAll(".legend")
          .data([0].concat(colorScale.quantiles()), function(d) { return d; });

     /* legend.enter().append("g")
          .attr("class", "legend");

      legend.append("rect")
        .attr("x", function(d, i) { return legendElementWidth * i; })
        .attr("y", height)
        .attr("width", legendElementWidth)
        .attr("height", gridSize / 2)
        .style("fill", function(d, i) { return colors[i]; });

      legend.append("text")
        .attr("class", "mono")
        .text(function(d) { return "â‰¥ " + Math.round(d); })
        .attr("x", function(d, i) { return legendElementWidth * i; })
        .attr("y", height + gridSize);

      legend.exit().remove();*/

    });  
  };

  heatmapChart(datasets[0]);
  
  var datasetpicker = d3.select("#dataset-picker").selectAll(".dataset-button")
    .data(datasets);

  datasetpicker.enter()
    .append("input")
    .attr("value", function(d){ return "Dataset " + d })
    .attr("type", "button")
    .attr("class", "dataset-button")
    .on("click", function(d) {
      heatmapChart(d);
    });
</script>


<% for(var i=0;i<slot.length;i++) {  %>
<%  var time=slot[i].start,hr=0,min=0;  %>
<%  if(time<31) {
        hr=(17+parseInt((time-17)/2)).toString();
        if(time%2===0) {
            min="30";
        } else {
            min="00"
        }
    }
    else  {
        time-=31;
        hr=(parseInt(time/2)).toString();
        if(time%2===1) {
            min="30";
        } else {
            min="00"
        }
    } %>
    <%  var time2=slot[i].end,hr2=0,min2=0;  %>
<%  if(time2<31) {
        hr2=(17+parseInt((time2-17)/2)).toString();
        if(time2%2===0) {
            min2="30";
        } else {
            min2="00"
        }
    }
    else  {
        time2-=31;
        hr2=(parseInt(time2/2)).toString();
        if(time2%2===1) {
            min2="30";
        } else {
            min2="00"
        }
    } %>

    
    <li> <%= hr+":"+min %> - <%= hr2+":"+min2 %>  </li>
<% } %>

<a href="/dashboard/addSlot">Add Slot</a>

<a href="/logout">Log Out</a>
<% include partials/footer.ejs %>